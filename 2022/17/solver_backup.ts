import { createArray, last, parseNumber, splitChars } from '../../shared/utils'

export function solver(inputStr: string, isExample: boolean) {
  const COUNT_1 = 2022
  const COUNT_2 = 1000_000_000_000
  const COUNT = COUNT_2
  const rocks = circularArray(['@@@@', '.@.\n@@@\n.@.', '..@\n..@\n@@@', '@\n@\n@\n@', '@@\n@@'])
  const windDirections = circularArray(splitChars(inputStr).map((char) => (char === '<' ? -1 : 1)))
  const windsCount = windDirections.length

  // console.log({ windsCount })

  let count = 0
  let windIndex = 0

  const maxDepths: Record<string, { rock: number; height: number; windIndex: number }[]> = {}
  type Recurring = {
    recurringStart: number
    recurringEnd: number
    recurringStartRock: number
    recurringRockInterval: number
  }
  let foundRecurring: Recurring = {
    recurringStart: 0,
    recurringEnd: 0,
    recurringRockInterval: 0,
    recurringStartRock: 0,
  }

  const patterns = new Map()
  let additionalHeight = 0

  let tower = [createArray(7, '#')]

  while (count < COUNT) {
    // console.log(maxDepths)

    const rockStr = rocks.next()
    const rockArr = rockStr.split('\n')
    const rockArrReversed = rockArr.slice().reverse()
    const rockHeight = rockArr.length

    let xIndex = 2
    let settled = false

    tower = tower.filter((line) => line.some((item) => item !== '.'))

    tower.push(createEmptyLine())
    tower.push(createEmptyLine())
    tower.push(createEmptyLine())

    for (const rockLine of rockArr.slice()) {
      const line = createEmptyLine()
      rockLine.split('').forEach((rock, index) => {
        line[xIndex + index] = rock
      })
      tower.push(line)
    }

    draw(`Starting rock fall: ${count}`)

    let yChange = 0

    while (!settled) {
      const wind = windDirections.next()

      const origX = xIndex
      const newIndex = xIndex + wind
      xIndex = minMax(newIndex, 6, 0)

      // Wind adjust

      const firstCurrent = tower.findIndex((line) => line.includes('@'))

      const linesWithRocks = tower.slice(firstCurrent)

      const newWindLines = []
      let shouldMove = true

      linesWithRocks.forEach((line, index) => {
        const filteredLine = line.map((item) => (item === '@' ? '.' : item))
        const rockLine = rockArrReversed[index]
        if (rockLine) {
          rockLine.split('').forEach((rock, index) => {
            const nextIndex = xIndex + index
            const current = filteredLine[nextIndex]
            if (rock === '.') {
              return
            }
            if (!current || current !== '.' || !numberIsBetween(nextIndex, 0, 6)) {
              //   console.log({ current, nextIndex, xIndex, index, rock })
              shouldMove = false
              return
            }
            filteredLine[nextIndex] = rock
          })
        }

        newWindLines.push(filteredLine)
      })

      if (shouldMove) {
        const replaceLength = newWindLines.length
        tower.splice(-replaceLength, replaceLength)
        tower.push(...newWindLines)
      } else {
        xIndex = origX
      }

      draw(`After wind adjust: ${wind > 0 ? 'right' : 'left'}`)

      // Rock fall

      const immediateBelowIndex = -rockHeight - 1

      const firstCurrentIndex = tower.findIndex((line) => line.includes('@'))
      const firstBelowIndex = firstCurrentIndex - 1
      const below = tower.slice(firstBelowIndex)
      const rest = tower.slice(0, firstBelowIndex)

      const [immediateBelow] = below

      // If line immediately below is empty, it's safe to remove

      if (immediateBelow.every((item) => item === '.')) {
        tower.splice(immediateBelowIndex, 1)
        draw('After descent (empty line below)')
        continue
      }

      const newLines = []

      below.forEach((line, index) => {
        const filteredLine = line.map((item) => (item === '@' ? '.' : item))

        const rockLine = (''.padStart(xIndex, '.') + rockArrReversed[index]).padEnd(7, '.')
        if (rockLine) {
          rockLine.split('').forEach((rock, rockIndex) => {
            if (rock !== '@') {
              return
            }

            const current = filteredLine[rockIndex]

            if (!current || current !== '.') {
              // console.log({ filteredLine, current, rock, xIndex, index, rockIndex })
              settled = true
              return
            }

            filteredLine[rockIndex] = rock
          })
        }

        newLines.push(filteredLine)
      })

      if (!settled) {
        yChange++
        const add = newLines.filter((line) => line.some((item) => item !== '.'))
        tower = [...rest, ...add]
        // console.log('After fall')
        // draw(10)
        draw('After descent')
      } else {
        // console.log(tower.slice(-4))
        tower = tower.map((line) => line.map((item) => (item === '@' ? '#' : item)))
        // console.log('After settle')
        // draw(10)
        draw('After settle')

        if (yChange > 0) {
          if (!maxDepths[yChange]) {
            maxDepths[yChange] = []
          }
          maxDepths[yChange].push({
            rock: count,
            height: tower.length + yChange,
            windIndex: windDirections.index,
          })
        }
      }
    }

    const height = tower.length

    let patternKey = `${windDirections.index}|${rocks.index}`
    for (const line of tower.slice(-5)) {
      patternKey += `|${line.join('')}`
    }

    if (patterns.has(patternKey)) {
      const previous = patterns.get(patternKey)
      console.log('We have pattern', previous, patternKey)
      const rocksChanges = count - previous.count
      const highestPointChanges = height - previous.height
      const cycles = Math.floor((COUNT - previous.count) / rocksChanges) - 1
      additionalHeight += cycles * highestPointChanges
      count += cycles * rocksChanges
    } else patterns.set(patternKey, { rocksPlaced: count, height })

    // console.log('Tower height', tower.length)

    // function debug(...params: unknown[]) {
    //   if (count >= 0) {
    //     console.log(...params)
    //   }
    // }

    // if (count === 1 || count % 2000 === 0) {
    //   const depths = Object.entries(maxDepths).sort((a, b) => parseNumber(b[0]) - parseNumber(a[0]))
    //   // console.log(depths.at(0)?.[0], depths.at(-1)?.[0])
    //   const maxDepth = depths.slice(0, 5)
    //   const recurring = depths.find(([depth, vals]) => {
    //     if (vals.length < 10) {
    //       return false
    //     }
    //     const [smallest, ...rest] = vals
    //     const [nextSmallest, ...restVals] = rest
    //     const diff = nextSmallest.rock - smallest.rock
    //     //   console.log(vals, smallest)
    //     return restVals.every((val) => (val.rock - smallest.rock) % diff === 0)
    //   })
    //   if (recurring) {
    //     const [height, vals] = recurring
    //     const [smallest, ...rest] = vals
    //     const [nextSmallest, ...restVals] = rest
    //     console.log(recurring)
    //     foundRecurring = {
    //       recurringStart: smallest.height,
    //       recurringEnd: nextSmallest.height,
    //       recurringStartRock: smallest.rock,
    //       recurringRockInterval: nextSmallest.rock - smallest.rock,
    //     }
    //     break
    //   }
    // }

    count++

    //draw(1)
  }

  console.log('foo', tower.length + additionalHeight)

  // console.log('result', tower.length)

  // const lastStuff = tower.slice(0, 1000)
  // const drawing = lastStuff.map((line) => line.join('')).join('\n')
  // // console.log(drawing)
  // const initialTower = tower.slice(0, foundRecurring.recurringStart)
  // const recurringLines = tower.slice(foundRecurring.recurringStart, foundRecurring.recurringEnd)
  // const recurringHeight = recurringLines.length
  // const nextRecurringLines = tower.slice(
  //   foundRecurring.recurringEnd,
  //   foundRecurring.recurringEnd + recurringHeight
  // )
  // console.log(patterns)
  // console.log({
  //   recurringStartIndex: foundRecurring.recurringStart,
  //   recurringEndIndex: foundRecurring.recurringEnd,
  //   nextStartIndex: foundRecurring.recurringEnd,
  //   nextEndIndex: foundRecurring.recurringEnd + recurringHeight,
  // })

  // // console.log(
  // //   recurringLines.map((line, index) => ({
  // //     line: line.join(''),
  // //     nextLine: nextRecurringLines[index].join(''),
  // //     check: line.join('') === nextRecurringLines[index].join(''),
  // //   }))
  // // )
  // const recurringCount = foundRecurring.recurringRockInterval
  // // console.log({ recurringCount, recurringHeight })
  // tower = tower.slice(0, foundRecurring.recurringStart)
  // count = foundRecurring.recurringStartRock + 1

  // let towerHeight = tower.length

  // // console.log({ towerHeight, rec: recurringLines.length })

  // // console.log({ remainingCount: COUNT - count })

  // const multiplier = Math.floor(
  //   (COUNT - foundRecurring.recurringStartRock) / foundRecurring.recurringRockInterval
  // )

  // // console.log({ recurringCount, recurringHeight })

  // count += foundRecurring.recurringRockInterval * multiplier
  // towerHeight += recurringLines.length * multiplier

  // const expected = 1514285714288
  // const expected1 = 1537175792495

  // let newTovers = recurringLines.slice()

  // windIndex = 3831
  // console.log({ remaining: COUNT - count })

  // console.log('Middle', {
  //   count,
  //   towerHeight,
  //   expected,
  //   diff: towerHeight - expected,
  //   chunk: multiplier,
  //   windIndex,
  //   recurringSize: recurringLines.length,
  //   chunkCount: COUNT / multiplier,
  // })

  // while (count < COUNT) {
  //   // console.log(maxDepths)

  //   newTovers = moveRock(newTovers, count)

  //   count++

  //   //draw(1)
  // }

  // console.log({ foundRecurring })

  // towerHeight += newTovers.length - recurringLines.length

  // console.log('Finished', {
  //   addedHeight: newTovers.length - recurringLines.length,
  //   count,
  //   towerHeight,
  //   expected,
  //   diff: towerHeight - expected,
  //   chunk: multiplier,
  //   windIndex,
  //   recurringSize: recurringLines.length,
  // })

  // while

  //   const compared = correct.split('\n').reverse()

  //   tower.forEach((line, index) => {
  //     const comp = compared[index]
  //     const current = line.join('')
  //     if (comp !== current) {
  //       console.log('Found error')
  //       console.log({ index, comp, current })
  //       throw new Error('Found error')
  //     }
  //     console.log({ index, current, comp })
  //   })

  //   console.log('All good!')

  function draw(message: string) {
    if (count > -1) {
      return
    }
    const lastStuff = tower.slice(-10).reverse()
    const drawing = lastStuff.map((line) => line.join('')).join('\n')
    console.log('\n')
    console.log(message)
    console.log(drawing)
  }

  function createEmptyLine() {
    return createArray(7, '.')
  }

  function minMax(num: number, check1: number, check2: number) {
    const min = Math.min(check1, check2)
    const max = Math.max(check1, check2)
    return Math.max(Math.min(num, max), min)
  }

  function numberIsBetween(num: number, check1: number, check2: number) {
    return minMax(num, check1, check2) === num
  }
}

const correct = `..#....
.###...
..#...#
.####.#
....###
.....#.
....###
.##..#.
.######
.###...
.###...
.#.#...
.#.#...
.###...
####.#.
..##.#.
..##.#.
..#.##.
..#####
..#.#.#
..#####
..###..
...#...
...####
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#..#.
###.###
.#####.
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#....
###....
..#.#..
######.
###.#..
.######
###...#
.#....#
#######
.####..
.####..
.####..
.##....
.###...
..#....
..####.
...##..
#..##..
#...#..
#...#..
#####..
###....
.#####.
..#....
..#....
###.##.
.#..##.
###..#.
.#...#.
####.#.
.##..#.
.##..#.
..#..#.
..#..#.
###..#.
##...#.
##..###
.#...#.
.#####.
.##....
.##....
###....
..#....
.###...
..#####
....##.
....##.
....#..
....#..
....#..
....#..
....#..
....#..
.####..
###....
.#####.
..##...
..##...
...#...
...#...
...##..
...##..
..###..
...#...
..###..
...#...
####...
...#...
...#...
.####..
.####..
.####..
###....
.#####.
.....#.
###..#.
###..#.
###..#.
##...#.
##..###
.#...#.
.#####.
.##....
.##....
####...
..###..
...#...
..####.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
...#...
..###..
...###.
....##.
....#..
....#..
....#..
.##.#..
.##.#..
#####..
.####..
###....
.#####.
...###.
...###.
...#.#.
...#.#.
...###.
...#...
..###..
...#...
...####
..##...
..##...
..#....
..#....
###.#..
..#.#..
.####..
..#.#..
..####.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
..#.##.
.#####.
..#####
....##.
....##.
....#..
....#..
....##.
..#.##.
..####.
..#.#..
..####.
###.#..
#######
####...
..###..
...#...
...####
.##.#..
.##.#..
..###..
...#...
..###..
...#...
..####.
.##.#..
.##.#..
..###..
..#...#
.###..#
.##...#
##....#
##.####
####.#.
####.#.
######.
.#####.
...#...
...#...
..##...
..##...
####...
..#####
...#.##
..####.
...#...
...#...
.####..
.####..
..###..
...#...
..###..
...#...
..####.
..###..
..###..
...##..
...##..
.####..
...###.
....#..
..####.
..##...
..###..
..#.#..
..#.#..
#####..
..###..
...#...
..####.
..#....
..#....
..#.#..
..#.#..
..#####
....###
...###.
....#..
..####.
..#....
..###.#
..###.#
..#####
..###..
...#...
...####
....#..
....#..
....#..
....#..
....#..
....#..
..###..
...#...
..###..
...#...
######.
##.##..
#..##..
#...#..
#...#..
#####..
###....
.#.....
####...
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#....
####...
..###..
...#...
####...
..##..#
..##..#
...####
...##..
...##..
..###..
.####..
..#.#..
#####..
..###..
...#...
#####..
##.#...
.####.#
.###..#
.###..#
.###..#
...####
...###.
...###.
.#.##..
#####..
.####..
...#...
..###..
...#...
..####.
....##.
....##.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
....#..
...###.
#####..
.##....
.##....
..#....
..#...#
..#...#
..#####
..###..
...#...
.####..
..##...
..##...
...#...
...#...
...##..
...##..
.####..
###....
.#####.
..#....
..#....
..#.#..
..#.#..
..###..
..#..##
.###.##
..#..#.
.#####.
...###.
...#...
..###..
...#...
.######
.##.#..
.#..#..
.####..
.#.#...
.####..
##.#...
######.
#...#..
#...#..
###.#.#
###.#.#
#######
...#.#.
...####
.#####.
.####..
.####..
###....
.#####.
..###..
..###..
..##...
..##...
.####..
...###.
#####..
.#..##.
.#..##.
.##..#.
.##.###
###..#.
.######
.#...##
.#...#.
.##.###
.##..#.
#######
.####..
.####..
.####..
.##....
.###...
..#....
..####.
..#....
..#....
####.#.
#######
.###.#.
..####.
..##.#.
..##.#.
...###.
.....#.
....###
.....#.
..####.
..###..
..###..
..#.#..
..#.#..
..####.
....###
.....#.
...####
####...
####...
###....
###....
####...
..###..
...#...
.####..
..##...
..##...
...#...
...#...
..##...
..##...
####...
..###..
...#...
.####..
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..###..
....#..
....#..
..#.#..
.####..
..#.#..
#####..
..###..
...#...
#####..
##.#..#
.####.#
....###
.....#.
..#####
..##.#.
..####.
.##.#..
.##.#..
..####.
....###
.#####.
....#..
.#..#..
.#..#..
.#..#..
.#..#..
.#..#..
.#####.
.#..###
.#..##.
.##.#..
.##.#..
#####..
..###..
..###..
..###..
..#....
.####..
..#.#..
#####.#
.##.#.#
.######
..###..
...#...
.####..
....#..
....#..
....#..
....#..
....#..
....#..
..###..
...#...
..###..
...#...
..####.
..#....
###.##.
###.##.
.##.#..
###.#..
.####..
.####..
....###
....###
..#.###
..#.#..
..####.
..#.#..
.####..
....##.
....##.
....#..
....#..
.####..
.#.#...
.####..
.#.#...
####...
..#....
..##...
####...
.#.###.
######.
.#####.
##..#..
##..#..
.####..
.#.#...
.####..
.#.#...
####...
.###.#.
.######
.###.#.
..####.
....##.
....##.
....#..
....#..
...##..
...##..
...##..
...##..
..###..
..#....
.###...
..#....
####...
..##...
..##...
..#....
..#....
..#..#.
..#..#.
..####.
.###...
..#....
..#....
..#####
..#..##
..#..##
..#..#.
..#.###
###..#.
..####.
...#...
...#...
...#.#.
...#.#.
...###.
.....#.
....###
##...#.
######.
.##.#..
.##.#..
..####.
...#.#.
..####.
...#.#.
..####.
...#...
...#...
...##..
...##..
..###..
...#...
#####..
##.#...
.####..
...#...
...#...
.####..
.####..
..####.
....###
.....#.
...####
....##.
....##.
.....##
.....##
...####
.....##
....###
####.#.
..#.##.
..#.##.
..#.#..
..#.#..
..###..
...#...
..###..
...#...
####...
..#....
###....
###....
.##.#..
###.#..
.####..
.####..
.#.....
.#.....
.#.....
.#.###.
.#.###.
######.
.#####.
....#..
....#..
..###..
#..#...
#.#####
#..#.##
#..####
##.#...
##.#...
.###.#.
...#.#.
..####.
...#.#.
..####.
.##.#..
.##.#..
#.####.
#...###
#....#.
#...##.
######.
.#..#..
###.#..
.####..
.####..
....#..
....#..
....#..
....##.
##..##.
##..##.
.#####.
#######
.##..##
..#..##
..##.#.
..#####
.###.#.
..####.
....##.
....##.
.....#.
.....#.
...###.
..#..#.
..#.###
..#..#.
..#####
..##...
..##...
...#...
...#...
...#..#
...#..#
...####
..###..
...#...
.####..
..##...
..##...
...#...
...#...
...##..
...##..
..###..
...#...
..###..
...#...
.####..
.#.....
.#.....
.#.....
.#.##.#
.#.##.#
###.###
.######
..#...#
..#.###
###..#.
###.###
.#####.
##.....
##.....
.#.....
.#.....
.##....
.##....
####...
..###..
...#...
..####.
.###...
.###...
.##....
.##....
####...
..###..
...#...
.####..
...#...
...#...
...##..
...##..
..###..
...#...
..###..
...#...
.####..
##.....
##.....
.#..###
.#..###
.#####.
.#..###
.#####.
.##....
.##....
..#....
..#....
..##.#.
..#####
.###.#.
...####
....##.
....##.
....#..
....#..
..####.
....###
.#####.
..###..
..###..
..####.
....###
.....#.
..####.
.###...
.###...
.#.#...
.#.#...
.###...
..#....
.###...
..#####
..##...
.###...
###....
###....
###..#.
###..#.
######.
.#####.
..##...
..##...
..#....
..#....
..##...
..##...
.###...
.#.....
###....
.#.....
.####..
..##...
..##...
..#....
..#....
..##...
..##...
.###...
.#.....
###....
.#.....
.####..
....#..
..###..
..###..
...###.
...####
.###.#.
...####
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..####.
#...###
#....#.
#..####
##..###
###.###
.##.###
..#####
####...
####.#.
.######
.#####.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
...#...
..###..
...#...
.######
.##...#
.#....#
.######
.####..
.#.###.
.#..#..
.#####.
.####..
.#####.
###.###
####.#.
...####
...####
...####
...##..
...###.
....#..
.####..
....#..
..###..
.#####.
###.##.
.#.###.
#######
.#..###
.#.####
.####..
.#.#...
####...
..##...
..##...
...#...
...##..
.####..
..#.##.
.#####.
..#.##.
######.
..####.
.##.###
.##..#.
..####.
..##...
..##...
..#....
..#...#
..#...#
..#####
..###..
.###...
.##....
.#.....
.#####.
.##....
.##....
###....
##.....
##.....
.#.#...
.####..
.###...
.######
####...
..###..
...#...
..####.
..##...
.####..
###.#..
.####..
.####..
..#....
..#....
..#....
..##...
..##...
..##...
####...
####...
####...
#.#....
####...
#.#####
##...#.
###..#.
.#.###.
#####..
..###..
.#####.
###.##.
.#.###.
.#####.
..#####
..##.#.
...####
....#..
#...#..
#..##..
#..##..
#####..
##..#..
#####..
####...
..#..#.
..#.###
####.#.
..#####
...#.##
..####.
.##..#.
.##..#.
##.####
##..#.#
#######
###.#.#
#######
.#...##
###..##
.#####.
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..###..
..#....
.###...
..#....
..####.
.##....
.##.#..
..#.#..
..#.#..
#####..
..###..
...#...
..####.
.###...
.###...
.##....
.##....
###....
..#....
.###...
..#...#
.####.#
...##.#
...####
..#.###
..#.##.
###.#..
######.
##..##.
######.
.###...
..#####
.....#.
.###.#.
.###.#.
.#####.
...###.
....#..
...####
....#..
....#..
....##.
##..##.
######.
.###...
..#....
..####.
..#....
..#....
..#.#..
..#.#..
..###..
...#...
..###..
...#...
..####.
....#..
....#..
.##.#..
.##.#..
..###..
..###..
..###..
....#..
...###.
#####..
.#.....
.#.....
.#.....
.#.....
##.##.#
##.##.#
.#.####
.####..
.###...
.######
####...
..###..
...#...
.####..
....#..
....#..
..###..
...#...
#####..
##.#...
.####..
..###..
..###..
..###..
#..#...
#.###..
#..#...
#.####.
###..#.
###..#.
#.#..#.
#.#.##.
######.
#####..
...#...
...#...
...##..
...##..
..####.
....###
.....#.
..####.
###....
###....
####...
####...
.####..
...###.
....#..
....#..
....#..
....#.#
....#.#
....###
.#####.
..#####
..##.#.
..####.
..##...
..##...
..#....
..#....
..#.#..
..#.#..
..####.
#######
..####.
..###..
..###..
...#...
..###..
####...
###....
#.#....
#.#####
####...
..###..
...#...
.####.#
....#.#
....#.#
..#####
....###
##...#.
######.
.##....
.##....
.##....
.##....
###....
###....
####...
..###..
...#...
...####
.###...
.###...
.#.#...
.#.#.#.
.######
.#####.
##.....
##.....
.#.....
.#.....
.#.....
.#....#
.#....#
###.###
.#####.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
....#..
.#####.
.##.#..
.####..
....#..
....#..
#.###..
#..#...
#.###..
#..#...
####...
###....
###..##
###..##
..#...#
.###..#
..#...#
..#####
...#..#
...#..#
...####
...##..
.#####.
.##.#..
.####..
...#...
...#...
...#.#.
...#.#.
.#####.
.##.#..
##.###.
##..#..
.#####.
.#...#.
.#...#.
.#####.
.###...
..#....
..#....
..#####
..#.#..
..#.#..
..###..
...#...
..###..
...#...
.####..
..#####
..#####
..####.
....###
.....#.
##.####
##..#..
##..#..
#####..
##.#...
#######
.#.#.##
.#####.
.##....
.##....
####...
..###..
...#...
..####.
..##...
..##...
..#....
..#....
..#.#..
..#.#..
..###..
....#..
...###.
....#..
.####..
.#.....
.#.....
.#..###
.##.###
.######
..#####
..##...
..##...
...#...
...#...
...##..
...##..
..###..
...#...
..###..
...#...
..####.
..#....
..#....
..#....
..#....
..#....
..#.##.
######.
..###..
...#...
...####
....###
....###
....###
...####
....##.
..#.##.
..#.#..
..#.#..
.##.#..
###.#..
.##.#..
..####.
###.#..
#####..
.##.#..
.##.##.
.#..##.
######.
.#####.
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..###..
...#...
..###..
...#...
..####.
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#....
###....
.#.....
###....
.#####.
..##...
..##...
..#....
..#....
..#....
.##....
###..#.
.#...#.
.#.###.
.#####.
.##....
.##....
####...
..###..
...#...
.####..
..##...
..##...
...###.
...###.
...##..
...##..
..###..
.##.#..
.#####.
..#.#..
..#####
..#.#..
..#.#..
..###..
....#..
...###.
....#..
..####.
....#..
....#..
....#..
....#..
..###..
..###..
..###..
...#...
..###..
...#...
...####
..##...
..##...
..#....
..#....
..#.#..
..#.#..
.####..
###....
.#.....
.####..
...#...
...#...
.####..
.####..
..####.
....###
.....#.
..####.
.###...
.###.#.
.######
.#####.
.##....
.##....
..#....
..#....
..#.#..
.##.#..
.####..
.#..#..
.#.###.
.#..#..
.#.####
.#..##.
.#..##.
.#...#.
###..#.
.#.###.
.####..
.###.#.
.######
.###.#.
..####.
..##...
..##...
..#....
..#....
#.#....
#.#....
#.#....
#.#....
###....
.#.....
###....
.#####.
.###...
.###...
.#.##..
#####..
.####..
#####..
..###..
..###..
...###.
...####
.###.#.
..####.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
...#...
..###..
.###...
.######
..##...
..##...
..#....
..#....
..#..#.
.##..#.
######.
.#####.
..##...
..##...
..#....
..#...#
###...#
..#...#
.###..#
..#####
...##..
#..##..
#...#..
#...#..
#####..
###....
.#.....
.####..
....#..
....#..
....#..
.#####.
.######
.###.#.
...####
..###..
..###..
..#.#..
..#.#..
..####.
....###
####.#.
...###.
...###.
...##..
...##..
..####.
....###
.#####.
.##....
.##....
..#..#.
..#..#.
..####.
..##...
..###..
...#...
..####.
....#..
....#..
....#.#
....#.#
....###
.....#.
....###
.....#.
..####.
..##...
..##...
..#....
..#....
..#....
###....
###..#.
.###.#.
..####.
..####.
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..####.
....###
.....#.
....##.
....##.
....#..
....#..
....#..
....#..
....#..
#####..
..###..
...#...
..###..
...#...
...####
..##...
..##...
..#....
..#..#.
..#..#.
..####.
.##.#..
.#####.
..#.#..
..#####
..#...#
.##...#
###.###
.#####.
..##.#.
..##.#.
#..###.
#..#...
#.###..
#..#...
####...
#..##..
#..##..
#.#.#..
#.####.
###.#..
.####..
..#....
..#....
###.#..
###.#..
.####..
###....
.#####.
..##...
..##...
..#....
..#....
..#..#.
.##..#.
#######
.######
....###
.....#.
..#####
..##.#.
..####.
..##...
..##...
..##...
..##...
..###..
..###..
..###..
...#...
..###..
...#...
####...
..#....
..#....
..#.#..
..#.#..
..###..
...#...
..###..
...#...
...####
....#..
....#..
....#..
....#..
..###..
..###..
..###..
##..#..
##.###.
#####..
..##...
..##.#.
...#.#.
...#.#.
.#####.
...###.
#####..
#......
#......
#......
##..###
###.###
.#..###
.####..
..###..
..###..
..###..
...#...
..###..
...#...
..####.
...#...
...#...
...##..
...##..
.####..
.#.#...
.####..
.#.#...
.####..
....###
..#####
.####.#
###.#.#
.#..###
.####..
..##...
..##...
...#...
..##...
..##...
####...
#####..
..####.
..#.#..
..####.
..####.
.####..
...###.
#####..
..###..
..###..
..#.#..
..#.#..
..####.
....###
.....#.
######.
...###.
..##.#.
..#####
####.#.
..####.
..###..
..###..
..#.#..
..#.#..
..###..
...#...
..###..
...#...
.####..
....##.
....##.
....#..
....#..
....##.
....##.
...###.
.##..#.
.##.###
.#...#.
.#####.
.#.#...
.#.#...
.####..
...###.
....#..
..####.
....##.
....##.
....#..
....#..
..###..
.##....
.##....
..#....
..#....
.##..#.
.##.###
.##..#.
.######
####...
..###..
...#...
.####..
...#...
##.#...
##.#.#.
.#.#.#.
######.
.#####.
.##....
.##....
..#....
..#....
..#.#..
..#.#..
..###..
...#...
..###..
...#...
..####.
....##.
....##.
.....#.
....##.
....##.
..####.
.#..##.
###.##.
.#...#.
.#####.
...#.#.
...#.#.
.###.#.
.#..###
.#...#.
.#.####
.###.#.
.###.#.
######.
.#####.
..##...
..##...
..#....
..#....
..#.#..
..#.#..
..###..
..#....
.###...
..#....
..####.
..#....
..#....
..#.#..
..#.#..
..###..
...#...
#####..
##.#...
####...
..#....
..#....
..#....
..#....
###....
###....
#######
..#.##.
.#####.
.##.#..
.#..#..
.####..
.##....
.###...
..#####
....#..
....#..
..###..
...#...
#####..
##.#...
.####..
..##...
..##...
..#....
..#....
.##....
.##....
.##....
.##....
###....
..#.##.
.#####.
..#.#..
#####..
...##..
...##..
.####..
...###.
#####..
.####..
.####..
.####..
.##....
.###...
..#....
..####.
..##...
..##...
...#...
...#...
...##..
...##..
..###..
####...
..##...
..##...
..#.#..
..####.
###.##.
..#..#.
..#..#.
..#.##.
..####.
###.#..
#######
####...
..###..
...#...
..####.
..#....
..###.#
..###.#
..#####
..###..
...#...
.####..
..##.#.
..##.#.
..####.
.###...
..#...#
.####.#
....###
.....#.
..#####
####.#.
######.
####.#.
####.#.
######.
###.#..
#.####.
#.#.#..
#####..
##...#.
###..#.
.#.###.
####...
...###.
...###.
...##..
...##..
..###..
...#...
..###..
...#...
####...
..##...
..##...
..#....
..#....
..#.#..
..#.#..
..###..
..#....
.###...
..#####
......#
......#
....###
.##..#.
.##.###
.#####.
....#..
....#..
.##.##.
###.##.
#.####.
####...
#.#....
####...
..##...
..##...
..#....
..#....
..##...
..##...
.###...
..#....
.###...
..#....
####...
.###...
.###...
.###...
..#....
.###...
..#####
.#.##..
##.##..
##..#..
##..#..
#####..
###....
.#####.
..##...
..##...
..#....
..#....
..#.#..
..#.#..
..####.
....###
.....#.
..####.
...#...
...#...
...#..#
...#..#
...####
..###..
...#...
..####.
....#..
.##.#..
.##.#..
.#####.
.######
.###.#.
..####.
.##....
.##...#
.#....#
.#.####
.####..
.#.#...
####...
..##.#.
..##.#.
...###.
.#.#...
.####..
.#.#...
.#####.
.##....
.##....
..#....
..#....
..#.#..
..#.#..
.####..
###....
.##....
..#####
..##...
..##...
.#####.
...###.
..###..
...#...
..####.
..#....
..#....
..#.#..
..#.#..
#####..
###....
.###...
..#....
..####.
..###..
..###..
..#.#..
..#.#..
..###..
...#...
..###..
...###.
######.
.#..#..
.#..#..
.####..
.##....
.###...
..#####
..###..
..###..
..###..
...#...
..###..
...#...
..####.
....###
....###
....###
.....#.
....###
.##..#.
.##.##.
.##.##.
.##.#..
#####..
..###..
...#...
#.###..
#..#...
#..####
#.###..
#.###..
#.###..
#...#..
#..###.
#####..
...###.
..####.
..##.#.
#######
.#####.
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..###..
....#..
...###.
#####..
..#....
..#...#
..#...#
..#####
#####..
##.#...
.####..
....##.
....##.
....#..
....#..
....#.#
....#.#
....###
...####
.....##
...#.##
..####.
...#.#.
...###.
...#...
..###..
.#.#...
.#####.
##.#...
##.#.##
#######
#..###.
#...#..
#####..
#.#....
#.#.##.
######.
..###..
...#...
..####.
#...##.
#...##.
#.#..#.
#.#.###
###..#.
..####.
..###..
..###..
..###..
.#.#...
.####..
.#.#...
.#####.
.##.#..
.##.#..
..###..
...#...
..###..
...###.
....###
....#.#
#####.#
..#####
....###
.#####.
..#.##.
..#.##.
..##.#.
..#####
.###.#.
...####
....##.
....##.
.....#.
.....#.
..####.
..#..#.
..#.###
..#..#.
.#####.
.#...##
.#...##
.#...#.
##...#.
##.###.
###.#..
######.
###.#..
.#####.
###.##.
.#..##.
.####..
....#..
....#..
.##.#..
.##.#..
.#..#..
###.#..
.####..
####...
...##..
#..##..
#...#..
#...#..
#####..
###....
.#####.
..#....
..#....
..####.
..####.
..####.
.###...
..#....
.####..
....##.
....##.
.....#.
.#...#.
.#.###.
.#...#.
.#..###
.#####.
....#..
....#..
....#..
....#..
###.#..
######.
###.#..
.####..
....#..
....#..
....#..
....#..
....#..
....#..
..###..
...#...
..###..
...#...
..####.
..##...
..##...
..#....
..#....
####...
####...
.###...
##..#..
##.###.
.#..#..
.#.####
.#.#...
.#.#...
.###...
...#...
..###..
...#...
.####..
.##....
.##....
..#....
..#....
..#.#..
..#.#..
.####..
###....
##.....
#####..
#..###.
##.###.
######.
.#####.
..##..#
#.##..#
#..####
#.###..
#..#...
####...
..##...
..##...
..#....
..#....
###....
.#.....
###....
.#####.
..##...
..##...
..#....
..#....
..#.#..
..#.#.#
..###.#
..#...#
.###..#
..#####
.##.#..
.##.#..
..###..
...#...
..###..
...#...
..####.
.###...
.###...
.##....
.##....
####...
..###..
#..#...
#.####.
#.#....
#.#....
####...
..###..
...#...
.####..
...##..
#..##..
#...#..
#...#..
#.###..
####...
.##...#
.##.###
..#.###
..#..##
..#.###
.##.##.
###.#..
.####..
####...
##.#...
##.#...
.###.#.
...#.#.
..####.
...#.#.
..####.
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..###..
...#...
..###..
...#...
..####.
....#..
....#..
....#..
....#..
..###..
..###..
..###..
...#...
..###..
...#...
.######
.##.#..
.#..#..
.####..
.#..#..
.#.###.
#####..
..##...
..##...
..#....
..#....
..##.#.
..#####
.###.#.
..####.
..#..##
..#..##
..##.#.
..#####
.###.#.
..####.
....##.
....##.
.#..#..
.#..#..
.#####.
.#..###
.#####.
..#....
..#....
..#....
..#....
..###..
..###..
####...
..###..
...#...
.#.####
.#..##.
.#.###.
.#.#.#.
.######
.#####.
..#....
..#....
####...
####...
.###...
..#....
.###...
.##....
.#.....
.#####.
.#.###.
.#.###.
######.
##.####
#..###.
#..###.
##.###.
#######
.###...
..##...
..#....
..#....
..#.#..
..#.#..
..###..
...#...
..###..
...#...
..####.
....#..
....#..
....#..
....#..
.##.#..
.##.#..
..###..
...#...
..###..
...#...
.####..
....###
....###
...####
..###..
...#...
..####.
.####..
.####..
.##.#..
.##.#..
.####..
###....
.#.....
.####..
..##...
..##...
..#....
..#....
..##.#.
..#####
.###.#.
#######
.#..###
.#..###
.#..#..
.#.###.
#####..
..#....
..#....
###.#..
###.#..
.####..
#######
.####..
..###..
..#.#..
..#.#..
.####..
###....
.#.....
####...
..##...
..##...
..#....
..#....
###.#..
##..#..
##..#..
.#..#..
.#..#..
.#.###.
.#..#.#
.######
###.###
.#####.
....##.
....##.
....#..
.#..#..
.#####.
.#..###
.#...#.
.#.####
.#..##.
.#..##.
.#...#.
.#...#.
######.
.#####.
..##...
..##.#.
..#..#.
..####.
..#.#..
..####.
#####..
..###..
..###..
..###..
...#...
..###..
...#...
...####
...#...
...#...
.####..
.####..
..###..
....#..
.#.###.
##..#..
######.
####...
####.#.
###..#.
.#.###.
.####..
....##.
....##.
...#.#.
...####
.###.#.
...####
...###.
...###.
.####..
..#.#..
.####..
..#.#..
.####..
..##...
..##...
..#....
..#....
.##.#..
.##.#..
.####..
.##....
.###...
..#....
..####.
...#.##
...#.##
...#.#.
...#.#.
.#.###.
#######
.###..#
.###..#
.#.####
.####..
.#.#...
.####..
...#...
...#...
.####..
.####..
..###..
..#....
.###...
..#....
..####.
...#...
...#...
...##..
...##..
#####..
###.#..
.####..
..#.#..
#####..
..###..
..###..
..###..
...#...
..###..
...#...
..####.
..##...
..##...
..#....
..#....
..##...
..##...
.###...
...#...
..###..
...#...
####...
..#....
###....
###....
.##...#
###...#
.##.###
..#####
..##...
..##...
.###...
.#.....
###....
.#.##..
.#.##..
.#####.
.##....
.##.##.
######.
..###..
...#...
.####..
....##.
....##.
....#..
....#..
....#.#
....#.#
....###
....#..
...###.
....#..
.####..
....##.
....##.
....#..
....#..
...##..
...##..
.####..
...###.
....#..
..####.
..##...
..##...
...#...
...#...
...##..
...##..
..####.
....###
.....#.
...####
.##.#..
.##.#..
.####..
.#.#...
.####..
.#.#...
.####..
.#.....
.#..###
.#..###
.#####.
#######
.#...#.
.#.###.
.#.###.
.#####.
.###...
..#....
.####..
..##...
..##...
..#....
..#....
..##...
..##...
.####..
...###.
....#..
...####
..##...
..##...
...#...
...#...
..##...
..###..
######.
#####..
..#....
..#....
####...
####.#.
.######
######.
..###..
..###..
...###.
...####
.###.#.
#.####.
#..##..
#..##..
##..#..
###.#..
.####..
####...
..##...
..##...
...#...
...#...
...#.#.
...#.#.
..####.
.###...
..#...#
.####.#
....###
.....#.
....###
.##..#.
.######
.###...
.###...
.#.#...
.#.#...
.###...
####.#.
..##.#.
..##.#.
..#.##.
..#####
..#.#.#
..#####
..###..
...#...
...####
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#..#.
###.###
.#####.
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#....
###....
..#.#..
######.
###.#..
.######
###...#
.#....#
#######
.####..
.####..
.####..
.##....
.###...
..#....
..####.
...##..
#..##..
#...#..
#...#..
#####..
###....
.#####.
..#....
..#....
###.##.
.#..##.
###..#.
.#...#.
####.#.
.##..#.
.##..#.
..#..#.
..#..#.
###..#.
##...#.
##..###
.#...#.
.#####.
.##....
.##....
###....
..#....
.###...
..#####
....##.
....##.
....#..
....#..
....#..
....#..
....#..
....#..
..###..
..#####
.####..
..#.#..
..###..
...#...
..###..
##.#...
######.
.##....
.##....
.##....
.##....
.###...
.###...
.###...
...#...
..###..
...#...
..####.
.##.#..
.##.#..
.#..##.
###.##.
.#.###.
##.####
##..#..
#...#..
#.###..
#...#..
#..###.
#####.#
.##...#
.##.###
.#..#..
.#.###.
.#..#..
.#..###
#######
...####
..###..
...#...
..####.
.....##
..#..##
..#...#
..#...#
..#####
..###..
...#...
..####.
.##....
.##...#
.##...#
.######
#####..
##.##..
#####..
..###..
...#...
..###..
...#...
...####
..##...
..##...
...#...
...#...
...##..
...##..
..###..
...#...
..###..
...#...
..####.
..###..
#####..
#####..
#.#.#..
#.####.
#.#.##.
#.#..#.
####.#.
##.#.#.
##.#.#.
.######
.#####.
.###...
.###...
.#.#...
.#.#...
.####..
...###.
....#..
....#..
....#..
....#..
....#..
....#..
#####..
..####.
.##.###
.##..#.
..####.
.##....
.##....
..#....
..#..#.
..#####
#.##.#.
####.##
#######
##....#
###...#
.#..###
.####..
###....
###..#.
###..#.
..#..#.
.###.#.
..#####
..##..#
..##..#
..#.###
..#.#..
..####.
..#.#..
.####..
...#...
...#...
...#..#
...#..#
...####
#####..
##.#...
#####..
#.###..
#.###..
#####..
###....
.#.....
.####..
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#....
####...
..###..
...#...
..####.
.##....
.##...#
..#...#
..#.###
..#.#..
..####.
#####..
..##...
..##...
..#....
..#....
..#....
..#....
..#....
..#....
###....
.#..#..
###.#..
.#..#..
#####..
..###..
..###..
.####..
###....
.######
..#..#.
#######
####.#.
.###.#.
.#####.
..##.##
..##.##
...####
..###..
...#...
..####.
...#...
...#...
...#.#.
##.#.#.
######.
.###...
..#...#
.####.#
..#.###
..#.#..
..####.
..#.#..
######.
##.##..
#..##..
#...#..
#...#..
#####..
###....
.#.....
####...
###....
###..#.
###..#.
..#..#.
.###.#.
..#####
..##...
..##...
...#...
...#...
.###...
...#...
..###..
...#...
.####..
..##...
..##...
..#....
..#....
..#.#..
..#.#..
..####.
....###
.....#.
...####
..##...
..##...
..###..
..###..
..###..
...#...
#####..
##.#...
.####..
.#.....
.#.....
.#.....
.#..###
.#..###
###.###
.#####.
....#..
....#..
....#..
....#..
..###..
..###..
..###..
...#...
..###..
...#...
####...
..#....
..#....
..#....
..#....
..#....
..#....
####...
..#####
..##.##
..#####
####...
####...
.###...
...#...
..###..
...#...
.####..
..#.##.
..#.##.
..#.#..
..#.#..
..####.
....###
.#####.
..##...
..##...
...#...
...#...
.#.##..
#####..
.####..
.####..
....#..
....#..
....#.#
.##.#.#
.##.###
..#...#
.###..#
..#...#
..#####
...##.#
...##.#
...####
..###..
...#...
####...
...#...
...#...
...##..
...##..
#####..
###....
.###...
..#....
####...
.##.#..
.##.#..
..###..
...#...
..###..
...#...
..####.
..#....
..#....
#####..
#####..
.####..
...##..
..###..
...#...
..####.
....#..
....#..
....#..
....#..
..###..
..###..
..###..
..#....
.###...
..#####
#######`

const circularArray = <TData>(arr: TData[]) => {
  return {
    index: 0,
    next() {
      const item = arr[this.index]
      this.index++
      if (this.index >= arr.length) this.index = 0
      return item
    },
    length: arr.length,
  }
}
